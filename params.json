{"name":"Langner","tagline":"Programing Language for Expressing Strategies","body":"Langner\r\n=======\r\n**Disclaimer:** Langner is in **very alpha**. The criticism, ideas and forbearance are **highly appreciated**. If you have any question or remark feel free to share it on the [Langner forum](https://groups.google.com/forum/#!forum/langner).\r\n\r\nWhat is Langer?\r\n-----------------------\r\nLanger is an **object oriented, rule based programming language**. Its interpreter is shipped as an **Python library**.  It was created to express behavior strategies. It has simple syntax based on languages like Python and C. It was designed to be convenient and readable for a programmer, but it can be easily used in [genetic programming](http://en.wikipedia.org/wiki/Genetic_programming) as well.  \r\n\r\nLangner was created as an research language. It is **not general purpose**, but it is general enough that it might be useful in other areas as well. It is avilable under [MIT license](http://opensource.org/licenses/MIT).\r\n\r\nWhere can I get it?\r\n-----------------------\r\nThe easiest option is via Python package manager:\r\n```bash\r\n $ pip install langner\r\n```\r\n\r\nGetting Started Guide\r\n-----------------------\r\n### 'Hello world' in Langer? ###\r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (True) -> (print(\"Hello world!\"));\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.run()\r\n```\r\n\r\nThe ouput:\r\n\r\n```\r\nHello world!\r\nHello world!\r\nHello world!\r\n...\r\n```\r\n\r\nLangner parser is avilable as a `build()` function in `langner` module. It takes code in a string. The **white space characters are ommited** when the input is parsed. Any formatting should be accepted. The functions returns the langner.ast.Strategy object. The Strategy extends `threading.Thread` class. It can be run by executing `start()` method, but in most of the examples we prefare just to execute `run()` method in the main thread. The program blocks until its  interrupted (CTRL+C). If there is no change in the code, the following examples will present only the `input` variable.\r\n\r\nThe Langner code is **list of rules separated with semicolons**. Each rule has two sections - **conditions and actions**. The rule has the following syntax:\r\n```\r\n(cond1, cond2, ..., condN) -> (action1, action2, ..., actionN);\r\n```\r\n\r\nThe Langer **strategy is evaluted in an infinite loop**. If the condtions are true, the actions are executed. In the given example the condition is always true and the action executes embaded function `print()` that prints to the standard output. The strategy will greet the world for the infinity.\r\n\r\n### Global Object Space ###\r\n\r\nThe key concept behind the Langner is the **Global Object Space (GOS)**. The rules are evaluate against objects in GOS.\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x) -> (print(x.msg));\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.add_to_gos({\"msg\":\"Hello\"})\r\nstrat.add_to_gos({\"msg\":\"World!\"})\r\n\r\nstrat.run()\r\n```\r\n\r\nThe output:\r\n```\r\nHello\r\nWorld!\r\nHello\r\nWorld!\r\n...\r\n```\r\n\r\nOne was of getting objects to GOS is by adding them with `add_to_gos()` method. This method takes dictionaries that maps a field name to a field value.\r\n\r\nWhen the variable appears in a condition you may read it as an **universal quantification**. In the given example we would read the rule as: *For each object x in GOS, print x.msg to the console.* Then each object in GOS is substituted under x. The variable condition is always true for each object in a GOS. Let's consider more complicated example:\r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x.ok) -> (print(x.msg));\r\n'''\r\n\r\nstrat = build(input)\r\n\r\nstrat.add_to_gos({\"ok\":True, \"msg\":\"Hello\"})\r\nstrat.add_to_gos({\"ok\":False, \"msg\":\"Goodbye\"})\r\nstrat.add_to_gos({\"ok\":True, \"msg\":\"World!\"})\r\n\r\nstrat.run()\r\n```\r\n\r\nThe following code will generate exactly the same output as previous example. The \"Goodbye\" message will not be printed. The rule can be read: *For each object x in GOS that x.ok is true, print x.msg to the console.*\r\n\r\nAlthough, the real world might be bit more complex than the next example let's face the truth about dating: \r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x.sex==\"f\", y.sex==\"m\", x.score == y.score) -> (print(x.name + \" dates \" + y.name));\r\n'''\r\n\r\nstrat = build(input)\r\n\r\n# Girls:\r\nstrat.add_to_gos({\"name\":\"Kate\", \"sex\":\"f\", \"score\":3})\r\nstrat.add_to_gos({\"name\":\"Meg\", \"sex\":\"f\", \"score\":7})\r\nstrat.add_to_gos({\"name\":\"Sandy\", \"sex\":\"f\", \"score\":10})\r\n\r\n# Boys:\r\nstrat.add_to_gos({\"name\":\"John\", \"sex\":\"m\", \"score\":3})\r\nstrat.add_to_gos({\"name\":\"Ben\", \"sex\":\"m\", \"score\":7})\r\nstrat.add_to_gos({\"name\":\"Alex\", \"sex\":\"m\", \"score\":10})\r\n\r\nstrat.run()\r\n\r\n```\r\nThe output:\r\n```\r\nKate dates John\r\nMeg dates Ben\r\nSandy dates Alex\r\nKate dates John\r\nMeg dates Ben\r\nSandy dates Alex\r\n...\r\n```\r\n\r\nThe following rule contains two variables. **The actions are executed only if, each condition in the rule is fullfilled.** In the given example the rule might be read: *For each object x and for each object y, that x is a female and y is a male and x and y have the same score, print the copule to the console.*\r\n\r\n### Creating and Removing Objects from GOS ###\r\n\r\n### Functions ###\r\n\r\n### Events ###\r\n\r\n### Conditions and Actions ###\r\n\r\n### Execution Order ###\r\n\r\nWhy a new language?\r\n-----------------------\r\nFor my research I needed a language that:\r\n\r\n1. allows experssing behaviour strategy in a simple rule based fashion,\r\n2. the strategy would be able to react to events from the environment,\r\n3. the language should have a syntax that can be used in [genetic programming (GP)](http://en.wikipedia.org/wiki/Genetic_programming).\r\n\r\nThe procedural programming languages could match two first goals, but their syntax is too complicated for GP. There are well developed rule based languages - for example Prolog. They are intended to work in question and answer mode rather than continious flow that changes its directions on the events.\r\n","google":"UA-44274809-2","note":"Don't delete this file! It's used internally to help with page regeneration."}