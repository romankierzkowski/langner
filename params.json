{"name":"Langner","tagline":"Programing Language for Expressing Strategies","body":"Langner\r\n=======\r\n**Disclaimer:** Langner is in **very alpha**. The criticism, ideas and forbearance are **highly appreciated**. If you have any question or remark feel free to share it on the [Langner forum](https://groups.google.com/forum/#!forum/langner).\r\n\r\nWhat is Langer?\r\n-----------------------\r\nLanger is an **object oriented, rule based programming language**. Its interpreter is shipped as an **Python library**.  It was created to express behavior strategies. It has simple syntax based on languages like Python and C. It was designed to be convenient and readable for a programmer, but it can be easily used in [genetic programming](http://en.wikipedia.org/wiki/Genetic_programming) as well.  \r\n\r\nLangner was created as research language. It is **not general purpose**, but it is general enough that it might be useful in other areas as well. It is available under [MIT license](http://opensource.org/licenses/MIT).\r\n\r\nWhere can I get it?\r\n-----------------------\r\nThe easiest option is via Python package manager:\r\n```bash\r\n $ pip install langner\r\n```\r\n\r\nGetting Started Guide\r\n-----------------------\r\n### 'Hello world' in Langer? ###\r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (True) -> (print(\"Hello world!\"));\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.run()\r\n```\r\n\r\nThe ouput:\r\n\r\n```\r\nHello world!\r\nHello world!\r\nHello world!\r\n...\r\n```\r\n\r\nLangner parser is available as a `build()` function in `langner` module. It takes code in a string. The **white space characters are omitted** when the input is parsed. Any formatting should be accepted. The functions returns the langner.ast.Strategy object. The Strategy extends `threading.Thread` class. It can be run by executing `start()` method, but in most of the examples we prefer just to execute `run()` method in the main thread. The program blocks until it is interrupted (CTRL+C). If there is no change in the code, the following examples will present only the `input` variable.\r\n\r\nThe Langner code is **list of rules separated with semicolons**. Each rule has two sections - **conditions and actions**. The rule has the following syntax:\r\n```\r\n(cond1, cond2, ..., condN) -> (action1, action2, ..., actionN);\r\n```\r\n\r\nThe Langer **strategy is evaluated in an infinite loop**. If the conditions are true, the actions are executed. In the given example the condition is always true and the action executes embedded function `print()` that prints to the standard output. The strategy will greet the world for the infinity.\r\n\r\n### Global Object Space ###\r\n\r\nThe key concept behind the Langner is the **Global Object Space (GOS)**. The rules are evaluate against objects in GOS.\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x) -> (print(x.msg));\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.add_to_gos({\"msg\":\"Hello\"})\r\nstrat.add_to_gos({\"msg\":\"World!\"})\r\n\r\nstrat.run()\r\n```\r\n\r\nThe output:\r\n```\r\nHello\r\nWorld!\r\nHello\r\nWorld!\r\n...\r\n```\r\n\r\nOne was of getting objects to GOS is by adding them with `add_to_gos()` method. This method takes dictionaries that maps a field name to a field value.\r\n\r\nWhen the variable appears in a condition you may read it as an **universal quantification**. In the given example we would read the rule as: \r\n\r\n*For each object x in GOS, print x.msg to the console.* \r\n\r\nThen each object in GOS is substituted under x. The variable condition is always true for each object in a GOS. Let's consider more complicated example:\r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x.ok) -> (print(x.msg));\r\n'''\r\n\r\nstrat = build(input)\r\n\r\nstrat.add_to_gos({\"ok\":True, \"msg\":\"Hello\"})\r\nstrat.add_to_gos({\"ok\":False, \"msg\":\"Goodbye\"})\r\nstrat.add_to_gos({\"ok\":True, \"msg\":\"World!\"})\r\n\r\nstrat.run()\r\n```\r\n\r\nThe following code will generate exactly the same output as previous example. The \"Goodbye\" message will not be printed. The rule can be read:\r\n\r\n*For each object x in GOS that x.ok is true, print x.msg to the console.*\r\n\r\nAlthough, the real world might be bit more complex than the next example let's face the truth about dating: \r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x.sex==\"f\", y.sex==\"m\", x.score == y.score) -> (print(x.name + \" dates \" + y.name));\r\n'''\r\n\r\nstrat = build(input)\r\n\r\n# Girls:\r\nstrat.add_to_gos({\"name\":\"Kate\", \"sex\":\"f\", \"score\":3})\r\nstrat.add_to_gos({\"name\":\"Meg\", \"sex\":\"f\", \"score\":7})\r\nstrat.add_to_gos({\"name\":\"Sandy\", \"sex\":\"f\", \"score\":10})\r\n\r\n# Boys:\r\nstrat.add_to_gos({\"name\":\"John\", \"sex\":\"m\", \"score\":3})\r\nstrat.add_to_gos({\"name\":\"Ben\", \"sex\":\"m\", \"score\":7})\r\nstrat.add_to_gos({\"name\":\"Alex\", \"sex\":\"m\", \"score\":10})\r\n\r\nstrat.run()\r\n\r\n```\r\nThe output:\r\n```\r\nKate dates John\r\nMeg dates Ben\r\nSandy dates Alex\r\nKate dates John\r\nMeg dates Ben\r\nSandy dates Alex\r\n...\r\n```\r\n\r\nThe following rule contains two variables. **The actions are executed only if, each condition in the rule is fulfilled.** In the given example the rule might be read:\r\n\r\n*For each object x and for each object y, that x is a female and y is a male and x and y have the same score, print the couple names to the console.*\r\n\r\n### Creating and Removing Objects from GOS ###\r\n\r\nThe object can be added to GOS with `new <variable>` action and removed from GOS with `delete <variable>` action. After the object is created, it can be access via variable name in the subsequent actions.  \r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x) -> (print(x.value));\r\n    (a.value > 0) -> (a.value = a.value - 1);\r\n    (a.value == 0) -> (new b, b.value = 3, delete a);\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.add_to_gos({\"value\":3})\r\n\r\nstrat.run()\r\n```\r\nThe output:\r\n```\r\n3\r\n2\r\n1\r\n0\r\n3\r\n2\r\n1\r\n0\r\n...\r\n```\r\n\r\nEvery evaluation cycle the `value` field in the object is decreased by one. When the field is equal 0 then the object is removed form GOS and the new object is created and initialized with a `value` equal 3. In the example, there is always one object in the GOS.\r\n\r\n### Undefined fields ###\r\n\r\nLangner object is bit different then objects in Python. First, it **does not have the methods**. Second, **the field can be either number, string, boolean or other object**. There is **no null value** in Langer. The field either have value or is undefined. If not existing field is access `undef` is returned. You can assign `undef` to a field. It means that you remove this field and it does not exist any longer. The `undef` has one more interesting property:  \r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (x) -> (print(x.foo + \" \" + x.foo.bar));\r\n'''\r\n\r\nstrat = build(input)\r\nstrat.add_to_gos({})\r\nstrat.run()\r\n```\r\n\r\nThe output:\r\n```\r\nundef undef\r\nundef undef\r\nundef undef\r\n...\r\n```\r\n\r\nIf an undefined field is accessed as an object it returns `undef` as well.\r\n\r\n### Functions ###\r\n\r\nYou can **execute almost any function from Python in the context of Langner** providing you have passed it in the `build` function in `functions` parameter. You can **use functions both in actions and conditions**.  In the given example the standard `random` function is used:\r\n\r\n```python\r\nfrom langner import build\r\nfrom random import random\r\n\r\ninput = '''\r\n    (True) -> (print(random()));\r\n'''\r\n\r\nstrat = build(input, functions=[random])\r\nstrat.run()\r\n```\r\n\r\nThe output:\r\n```\r\n0.653709135292\r\n0.475016218464\r\n0.394916852958\r\n0.132886618414\r\n...\r\n```\r\n\r\n### Events ###\r\n\r\nThe events in Langer is a mechanism of an input. It is a way that external world can communicate with a strategy. Event is a kind of condition. This **condition is fulfilled when an event has been triggered**. The parameters of an event are available for other conditions and actions of the rule. To differentiate event from a function call, event name is preceded with **# symbol**. To trigger an event, you have to execute method of a strategy, with a parameters you want to pass.\r\n\r\n*Note:* There should be *only one event per rule**!\r\n\r\nLet's consider [real life example](http://youtu.be/EtoMN_xi-AM):\r\n\r\n```python\r\nfrom langner import build\r\nfrom time import sleep\r\n\r\ninput = '''\r\n    (True) -> (print(\"na na\"));\r\n    (#show_message(msg)) -> (print(msg));\r\n'''\r\n\r\nstrat = build(input)\r\n\r\nstrat.daemon = True\r\nstrat.start() # It starts strategy as a separate thread.\r\n\r\nwhile(True):\r\n    strat.show_message(\"Batman!\")\r\n    sleep(0.01)\r\n```\r\n\r\nThe output:\r\n```\r\nna na\r\nna na\r\nna na\r\nna na\r\nna na\r\nna na\r\nna na\r\nna na\r\nna na\r\nBatman!\r\nna na\r\nna na\r\nna na\r\n...\r\n```\r\n\r\nIn this example the strategy is started as a daemon. Once every 0.01 second event `#show_message()` is triggered. It passes \"Batman!\" message to the context of a rule.\r\n\r\n### Operators ###\r\n\r\nLangner use following operators (the precedence is exactly the same as in Python):\r\n\r\n<table>\r\n  <tr>\r\n    <td>||</td><td>Or</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&&</td><td>And</td>\r\n  </tr>\r\n  <tr>\r\n    <td>!</td><td>Logical Negation</td>\r\n  </tr>\r\n  <tr>\r\n    <td>==, &lt;=, &gt;=, &lt;, &gt;</td><td>Comparison</td>\r\n  </tr>\r\n  <tr>\r\n    <td>|</td><td>Bitwise Or</td>\r\n  </tr>\r\n  <tr>\r\n    <td>^</td><td>Bitwise Xor</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&</td><td>Bitwise And</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&lt;&lt;</td><td>Shift Left</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&gt;&gt;</td><td>Shift Right</td>\r\n  </tr>\r\n  <tr>\r\n    <td>+, -</td><td>Addition and Subtraction</td>\r\n  </tr>\r\n  <tr>\r\n    <td>*, /, %, //</td><td>Multiplication, Division, Modulo, Floor Division</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-, ~</td><td>Arithmetic Negation, Bitwise Inversion</td>\r\n  </tr>\r\n  <tr>\r\n    <td>**</td><td>Power</td>\r\n  </tr>\r\n  \r\n</table>\r\n\r\n### Execution Order ###\r\n\r\nThe strategy is **evaluated in the cycles**. Each cycle the rules are evaluated against object from current state of the GOS. The rules are evaluated in the order of definition. The same refers to the conditions in the rule. Each cycle brings GOS from one state to another. **The actions from one cycle cannot affect conditions from the same cycle.** If all of the rule condition are fulfilled the rule actions are scheduled to execution. **The actions are executed after all rules has been evaluated.**\r\n\r\n```python\r\nfrom langner import build\r\n\r\ninput = '''\r\n    (o(\"A\"), o(\"B\")) -> (o(\"C\"), o(\"D\"));\r\n    (o(\"F\"), o(\"G\")) -> (o(\"G\"), o(\"H\"));\r\n    (True)->(print(\"-----------------\"));\r\n'''\r\n\r\ndef o(v):\r\n    print v\r\n    return True\r\n\r\nstrat = build(input, functions=[o])\r\nstrat.run()\r\n```\r\n\r\nThe output:\r\n```\r\nA\r\nB\r\nF\r\nG\r\nC\r\nD\r\nG\r\nH\r\n-----------------\r\nA\r\nB\r\n...\r\n```\r\n\r\nTo separate output from the different cycles we have added the rule:\r\n\r\n```\r\n(True)->(print(\"-----------------\"));\r\n```\r\n\r\nThe function `o()` prints message to the output and return `True`. That is why it can be used as condition and an action. The conditions are executed first: A B F G then there are executed actions: C D G H.\r\n\r\nWhy a new language?\r\n-----------------------\r\nFor my research I needed a language that:\r\n\r\n1. allows expressing behavior strategy in a simple rule based fashion,\r\n2. the strategy would be able to react to events from the environment,\r\n3. the language should have a syntax that can be used in [genetic programming (GP)](http://en.wikipedia.org/wiki/Genetic_programming).\r\n\r\nThe procedural programming languages could match two first goals, but their syntax is too complicated for GP. There are well developed rule based languages, for example Prolog. They are intended to work in question and answer mode rather than continuous flow that changes its directions on the events.\r\n","google":"UA-44274809-2","note":"Don't delete this file! It's used internally to help with page regeneration."}